/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h> // https://github.com/zmkfirmware/zmk/blob/main/app/include/dt-bindings/zmk/keys.h
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include <dt-bindings/zmk/hid_usage.h>
#include <dt-bindings/zmk/hid_usage_pages.h>
#include <dt-bindings/zmk/modifiers.h>

#define HYPER LC(LS(LG(LALT)))

// Portuguese layout (ABNT2) keys
// https://github.com/joelspadin/zmk-locale-generator/releases/download/v1.3.2/keys_pt_abnt2.h
#define PT_C_CEDILLA (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SEMICOLON_AND_COLON))
#define C_Dilla (PT_C_CEDILLA)
#define PT_SINGLE_QUOTE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_GRAVE_ACCENT_AND_TILDE))
#define PT_SQT (PT_SINGLE_QUOTE)
#define PT_BACKSLASH (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE))
#define PT_BSLH (PT_BACKSLASH)
#define PT_COLON (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SLASH_AND_QUESTION_MARK)))
#define PT_SLASH (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_INTERNATIONAL1))
#define PT_FSLH (PT_SLASH)
#define PT_SEMICOLON (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SLASH_AND_QUESTION_MARK))
#define PT_SEMI (PT_SEMICOLON)
#define PT_ACUTE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_LEFT_BRACKET_AND_LEFT_BRACE))
#define PT_TILDE (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE))
#define PT_LEFT_BRACKET (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE))
#define PT_LBKT (PT_LEFT_BRACKET)
#define PT_RIGHT_BRACKET (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE))
#define PT_RBKT (PT_RIGHT_BRACKET)
#define PT_PIPE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_NON_US_BACKSLASH_AND_PIPE)))
#define PT_CARET (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE)))
#define PT_LEFT_BRACE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_RIGHT_BRACKET_AND_RIGHT_BRACE)))
#define PT_LBRC (PT_LEFT_BRACE)
#define PT_RIGHT_BRACE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_BACKSLASH_AND_PIPE)))
#define PT_RBRC (PT_RIGHT_BRACE)
#define PT_UNDERSCORE (LS(ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE)))
#define PT_UNDER (PT_UNDERSCORE)


#define KP_mply (KP_MULTIPLY)

/* &mo DONTQY -> Momentary Layer 0 toggled by keypress
 * &lt SYMBOL PT_SQT -> Layer_tap, Layer 1 when held send keycode ' when tapped
 * &mt LSHIFT CAPS -> Mod-Tap behavior, shift when held caps when tapped
 * 
 *
 *
 * zmk key codes can be consulted here: https://zmk.dev/docs/codes
 *
 *
 */


/* none_layer { */
/*             bindings = < */
/*             &none           &none         &none        &none       &none                                                                                               &none      &none        &none         &none        &none */
/*             &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none */
/*             &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none */
/*             &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none */
/*             &none           &none         &none        &none       &none       &none     &none     &none   &none             &none     &none    &none     &none        &none      &none        &none         &none        &none */
/*             &none           &none         &none        &none       &none                 &none     &none   &none             &none     &none    &none                  &none      &none        &none         &none        &none */
/*             >; */
/*         }; */


// layers
#define DONTQY 0 // DEFAULT
#define SYMBOL 1 // LOWER 1
#define PAGER  2
#define MAGIC  3
#define FACTORY_TEST 4

/ { // root device tree Node
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo SYMBOL>, <&to SYMBOL>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
        underspc: space_underline { // don't like the lagging when spacing
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SPACE>, <&kp LS(MINUS)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
      compatible = "zmk,keymap"; // this is a prerequisite

        dontqy_layer {
          // default moergo layer
          // ---------------------------------------------------------------------------------------------------------------------------------
          // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
          // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
          // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
          // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
          // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
          // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

          bindings = <
          &kp F1            &kp F2        &kp F3       &kp F4      &kp F5                                                                                              &kp F6     &kp F7       &kp F8        &kp F9       &kp F10
          &kp ESC           &kp N1        &kp N2       &kp N3      &kp N4      &kp N5                                                                     &kp N6       &kp N7     &kp N8       &kp N9        &kp N0       &kp MINUS
          &kp TAB           &kp X         &kp Y        &kp O       &kp U       &kp J                                                                      &kp PT_SEMI  &kp F      &kp D        &kp W         &kp Q        &kp PT_ACUTE
          &lt SYMBOL PT_SQT &kp C         &kp I        &kp E       &kp A       &kp K                                                                      &kp COMMA    &kp N      &kp T        &kp S         &kp P        &lt SYMBOL PT_TILDE 
          &kp LSHFT         &kp C_Dilla   &kp V        &kp L       &kp H       &kp Z      &lt PAGER PG_UP &kp PG_DN &magic MAGIC 0  &kp RALT &kp HOME &kp END   &kp DOT      &kp R      &kp M        &kp G         &kp B        &kp RSHFT
          &kp LMETA         &kp PT_BSLH   &kp PT_COLON &kp LEFT    &kp RIGHT              &kp RET   &kp LCTRL &kp DEL         &kp BSPC &kp LALT &kp SPACE              &kp DOWN   &kp UP       &kp EQUAL     &kp PT_FSLH  &kp RMETA
          >;
        };

        symbol_layer {
          bindings = <
          &kp C_BRI_DN      &kp C_BRI_UP  &kp C_PREV   &kp C_NEXT  &kp C_PP                                                                                            &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &none        &kp PAUSE_BREAK
          &trans            &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &kp PSCRN
          &trans            &kp STAR      &kp HASH     &kp PT_LBKT &kp PT_RBKT &kp PT_PIPE                                                                &kp PRCNT    &kp N7     &kp N8       &kp N9        &kp KP_MINUS &kp SLCK
          &trans            &kp AT        &kp DOLLAR   &kp LPAR    &kp RPAR    &kp PT_CARET                                                               &kp COMMA    &kp N4     &kp N5       &kp N6        &kp KP_mply  &trans
          &trans            &kp EXCL      &kp AMPS     &kp PT_LBRC &kp PT_RBRC &kp PT_TILDE &trans  &trans    &trans          &trans   &trans   &trans    &kp DOT      &kp N1     &kp N2       &kp N3        &kp KP_PLUS  &trans
          &trans            &kp KP_MINUS  &kp KP_EQUAL &kp LT      &kp GT                   &trans  &trans    &trans          &trans   &trans   &trans                 &kp N0     &kp DOT      &kp EQUAL     &kp KP_SLASH &trans
            >;
        };


        pager_layer {
            bindings = <
            &none           &none         &none        &none       &none                                                                                               &none      &none        &none         &none        &none
            &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none
            &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none
            &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none
            &none           &none         &none        &none       &none       &none     &none     &none   &none             &none     &none    &none     &none        &none      &none        &none         &none        &none
            &none           &none         &none        &none       &none                 &none     &none   &none             &none     &none    &kp PT_UNDER           &none      &none        &none         &none        &none
            >;
        };
        
        magic_layer {
            bindings = <
            &bt BT_CLR      &none         &none        &none       &none                                                                                               &none      &none        &none         &none        &bt BT_CLR_ALL
            &none           &none         &none        &none       &none       &none                                                                      &none        &none      &none        &none         &none        &none
            &none           &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                               &none        &none      &none        &none         &none        &none
            &bootloader     &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                               &none        &none      &none        &none         &none        &bootloader
            &sys_reset      &none         &none        &none       &none       &none        &bt_2     &bt_3   &none            &none     &none     &none  &none        &none      &none        &none         &none        &sys_reset
            &none           &none         &none        &none       &none                    &bt_0     &bt_1   &out OUT_USB     &none     &none     &none               &none      &none        &none         &none        &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
